1) My parser relies on html tags and css selectors that are specific to the html template used for each Amazon book. For example, the title tag is always located in an html span with an id of "btAsinTitle," so the parser always searches for that tag to find the title. To extend this application to other domains, you would have to analyze how the other domains template their html and search for the specific html tags and css selectors that domain uses to display their relevant information like author and title.

2) The answer to this question is essentially the same as the first question. To extend this to other items, you would first have to create new classes to store information about these items and then change or add new checks to the parser based on how the new item html template uses html tags and css selectors to display the relevant item information.

3) My algorithm runs in O(Number of books * Max box weight * Number of boxes). My box packing algorithm is just a variation of the solution to the knapsack problem which tries to maximize the number of items stored in a container with a fixed limit. The knapsack algorithm runs in complexity O(Number of items * Container limit), but since we are performing this algorithm for each box, we need to factor in the total number of boxes which gives us the previously stated complexity O(num books * max weight * num boxes). Thus, the algorithm runs in polynomial time with respect to number of books, maximum box weight, and number of boxes.

