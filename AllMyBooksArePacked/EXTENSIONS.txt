1.) Nokogiri is a gem I used to parse the webpage. It passes html content or webpages to the 
Nokogiri object generator which may then be sent to page_parser(file) in file. One simply needs to modify
page_loader to include its url object maker to pass a live webpage to to page_parser(file) in parameter file. As for
domains beyond amazon one would need to locate where the relevant information is within a web page and pass
that information on to the relevant variables. If a pattern can be discerned, like the one I found on amazon,
one could create a method specifically for that domain and call on it when needed. 

I know this may come off as brittle in its application but, from my frame of thought, parsing an entire webpage for certain keywords, an alternative that is not subject to constaints of which ever domain one may be searching in, is rife with trouble. For instance, "title" appears in book10.html no less than 181 times. In this case identifying the level, or range of levels, of HTML code where title may be appeared to be a better solution.

2.) As for products beyond books since most websites follow a specific layout patterns may emerge so one knows where to look for the information that may be relevant to their query. Again this may appear brittle in application. In my experience choosing an approach to a problem always comes with its own set of constrains, penalties, and trade offs; especially in programming. Choosing to be more precise on where I sent my parser came at the expense of the extensability of my program in operating in other domains and, as in this case as well, in looking for products other than books. I simply had to choose. Charles De Gaulle, a french statesman, once lamented "To govern is always to choose among disadvantages"; I am of the same view in relation to programming as well.

3.) Answering this question fills me with a great amount of resignation and frustration but that is not necessarily a bad thing. My solution to sorting the books by weight is by and large, inefficient. I wrote the program within a week and set out make my sort class more effecient on the second week. My curiosity led me to the topic of dynamic programming and found this to be the proper solution to my problem. However, being self taught dynamic programming was something I've had little to no experience with at this juncture in my development. And unfortunately it seems a week working on this topic was simply not enough time to correctly digest what I was reading, let alone translate it into quality working code. Seriously bummed that I was not able to work out a proper solution but I am grateful for having come accross it and this topic will be my next area focus going forward. That being said a proper solution to this problem would fall along the lines of alogrithms designed to solve the "sub set" and "Knackpack" problems. The solution would also have to be recursive in nature as well. At this point that is the best answer I can provide to this question.

Addendum:
	I'm sure reading over what I have written here it may seem that I glum and bummed with this assignment but that is simply not true. It was challenging but I had a blast doing this coding challenge. I am self taught, and to see where I started out to where I am now is simply awesome. Its not perfect and may be incomplete, see answer #3, but it is something I created and proud of. Hopefully you think it merits at least an audiance, an interview so that I may make my case for employment in person. Thank you for the opportunity and your time. 

																													-JD