1. Domains beyond Amazon.com:
  The cheerio npm module seems like a solid way to scrape just about any site for information.

2. Products beyond just simply books:
  For amazon in particular, we could target the <span> tag with ID #productTitle, and this applies for many products.
  There's also a 'Product Details' section for every product. So essentially, we would look for commonalities between all of the product pages, so that there is a universal scraping algorithm.

3. Parse and ship 2,000,000 books (in a reasonably time frame; e.g., polynomial time) instead of merely 20:

  One way to speed it up would be not sort the books by weight, and just pack them in the order they come.
  Also, I've employed a 'Best Fit' method, which searches every single box for the 'best fit' (box that will have the least room leftover after adding the current book), which is polynomial time complexity (nested loops). Instead, to add speed, a 'First Fit' strategy could be used. This would place each book in the first box that it will fit in (still nested loops, but less searching). Additionally, the boxes should be marked as 'full', which would remove them from the loop that searches for appropriate box placement.

  Different approach:
  If all the books were sorted by weight, and assuming they were all less than 10 lbs while still using 10lb max boxes, we could start packing from the middle of the list and put two 5 lb books together, and then move outwards until we are combining 3 and 7 lb books, 2.5 and 7.5, 9 and 1 pounders, so on and so forth. It would be easiest to look for two books, which when added together equal exactly 10 lbs. Once the exact matches were out we could add more than two books together (ex. 7lb and two 1.5lb books). This would reduce the time complexity, because we are looking only at the books for the needed weights, rather than looping through the open boxes for every book.

  I believe a data structure could help with the above idea, such as a hash table to group books into buckets with similar weights (ex. group all books together from 5 to 5.1 lbs). Or, one big object with keys '5 - 5.1': with the value as all the associated books in that weight range as an array of values.

  Algorithm aside, we could deploy the sorting application onto remote virtual machines. Essentially,
  spread the work load out onto machines other than our own.
